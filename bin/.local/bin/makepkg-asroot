#!/bin/bash -
set -o errexit
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
# Simulate makepkg --syncdeps / --rmdeps as root with pacutils
argv0=makepkg-pacutils

# default options
mode=build checkdepends=1 install=0 install_asdeps=0

# default arguments
makepkg_args=() pacman_args=() pactrans_args=()

# Allow to drop permissions for commands as needed (#907)
as_user() {
    #global build_user
    local USER HOME SHELL

    if [[ $UID == 0 ]] && [[ -v build_user ]]; then
        # runuser --pty messes up the terminal with AUR_DEBUG set, use setpriv(1)
        # and replicate the runuser(1) behavior for setting the environment
        { IFS= read -r USER
          IFS= read -r HOME
          IFS= read -r SHELL
        } < <(getent passwd "$build_user" | awk -F: '{printf("%s\n%s\n%s\n", $1, $6, $7); }')
        wait "$!"

        setpriv --reuid "$build_user" --regid "$build_user" --init-groups \
            env USER="$USER" HOME="$HOME" LOGNAME="$USER" SHELL="$SHELL" "$@"
    else
        env "$@"
    fi
}

# Retrieve dependencies as regular user (sources PKGBUILD)
# Assumes the build user has access to the PKGBUILD directory, see:
# http://allanmcrae.com/2015/01/replacing-makepkg-asroot/
get_depends_as_user() {
    as_user bash /dev/stdin <<'EOF'
source PKGBUILD || exit 1

if (( ${#depends[@]} )); then
   printf 'depends = %s\n' "${depends[@]}"
fi
if (( ${#makedepends[@]} )); then
   printf 'makedepends = %s\n' "${makedepends[@]}"
fi
if (( ${#checkdepends[@]} )); then
   printf 'checkdepends = %s\n "${checkdepends[@]}"
fi
EOF
}

# Save transaction so that it can easily be undone later
get_transaction() {
    if (( $# )); then
        mapfile -t pkgnames < <(pacman -Sp "$@" --print-format '%r/%n')
        wait "$!" || return

        env LANG=C pacinstall --print-only "${pkgnames[@]}" |
            awk '$1 == "removing" || $1 == "installing"'
        return "${PIPESTATUS[0]}"
    fi
}

install_depends() {
    #global remove_args install_args
    if (( ${#remove_args[@]} + ${#install_args[@]} )); then
        pacinstall "${pactrans_args[@]}" --as-deps "${install_args[@]}" --remove "${remove_args[@]}"
    fi
}

remove_depends() {
    #global remove_args install_args
    if (( ${#remove_args[@]} + ${#install_args[@]} )); then
        pacremove "${pactrans_args[@]}" "${install_args[@]##*/}" --install "${remove_args[@]}"
    fi
}

source /usr/share/makepkg/util/parseopts.sh
source /usr/share/makepkg/util/message.sh

# option parsing
opt_short='rsU:' # special options
opt_short+='AcdefghiLmop:RSVC' # options passed on to makepkg
opt_long=('rmdeps' 'nocheck' 'check' 'user:' 'resolve-conflicts:' 'syncdeps' 'noconfirm')
opt_long+=(
    'ignorearch' 'clean' 'config:' 'nodeps' 'noextract' 'verifysource'
    'force' 'geninteg' 'skipinteg' 'skipchecksums' 'skippgpcheck' 'help'
    'holdver' 'install' 'log' 'nocolor' 'nobuild' 'source' 'version'
    'cleanbuild' 'allsource' 'noarchive' 'noprepare' 'sign' 'nosign'
    'key:' 'needed' 'asdeps' 'noprogressbar' 'packagelist' 'printsrcinfo'
)

if ! parseopts "$opt_short" "${opt_long[@]}" -- "$@"; then
    usage
fi
set -- "${OPTRET[@]}"

# TODO: wrap all short options above
# TODO: additional pactrans options: --config, --sysroot, --dbpath
unset build_user
while true; do
    case "$1" in
        --asdeps)
            install_asdeps=1 ;;
        --rmdeps)
            rmdeps=1 ;;
        --nocheck|--no-check)
            checkdepends=0 ;;
        --noconfirm)
            pactrans_args+=(--no-confirm) ;;
        -s|--syncdeps)
            syncdeps=1 ;;
        --install)
            install=1 ;;
        --needed)
            ;; # XXX: noop - pactrans has no --needed flag
        --noprogressbar)
            ;; # XXX: noop - pactrans has no --noprogressbar flag
        --nocolor)
            color=0 ;;
        -U|--user)
            shift; build_user=$1 ;;
        --resolve-conflicts)
            # prompt, none, all, provided, depends, provided-depends
            shift; pactrans_args+=(--resolve-conflicts "$1") 
            ;;
        # makepkg modes
        --nobuild|--geninteg|--help|--source|--version|--allsource|--packagelist|--printsrcinfo)
            mode=${1#--} 
            ;;
        # other makepkg arguments
        --ignorearch|--clean|--nodeps|--noextract|--verifysource|--force|--skipinteg|--skipchecksums)
            makepkg_args+=("$1")
            ;;
        --holdver|--log|--cleanbuild|--noarchive|--noprepare|--sign|--nosign)
            # XXX: signing might have to be handled manually (necessary environment
            # variables not available in the root environment)
            makepkg_args+=("$1") 
            ;;
        --config|--key)
            makepkg_args+=("$1=$2") 
            ;;
        --) shift; break ;;
    esac
    shift
done

if [[ ! -v NO_COLOR ]] && [[ ! -v AUR_DEBUG ]]; then
    [[ -t 2 ]] && colorize
fi

# check that an unprivileged user is specified
if (( $(id -u "${build_user:=$SUDO_USER}") == 0 )); then
    error '%s: unprivileged user required' "$argv0"
    exit 2
fi

# select which dependencies are handled
dep_fields=('depends' 'makedepends')
if (( checkdepends )); then
   dep_fields+=('checkdepends')
fi

# remove dependencies on error or interrupt
unset remove_args install_args
trap 'remove_depends' EXIT

case $mode in
    build|nobuild) # syncdeps/rmdeps also apply to --no-build (download agents e.g.)
        # retrieve dependencies which are missing on the host
        mapfile -t targets < <(
            get_depends_as_user | pacini - "${dep_fields[@]}" | xargs -r pacman -T "${pacman_args[@]}"
            (( PIPESTATUS[0] )) )
        wait "$!"

        # remove and install packages such that dependencies are fulfilled (this will
        # depend on the --resolve-conflicts option)
        while read -r type package _; do
            case $type in
                removing)
                    remove_args+=("${package##local/}") ;;
                installing)
                    install_args+=("$package") ;;
            esac
        done < <(get_transaction "${targets[@]}" 2>/dev/null)
        wait "$!"

        # XXX: only install dependencies if a package will be built (unknown
        # before running makepkg or makepkg --packagelist)
        (( syncdeps )) && install_depends

        # Now we can build the package
        as_user makepkg "${makepkg_args[@]}"

        # TODO: source PKGBUILD to avoid linting
        if (( install )); then
            mapfile -t pkgs < <(as_user makepkg --packagelist)
            wait "$!"

            if (( install_asdeps )); then
                pacinstall "${pactrans_args[@]}" --file "${pkgs[@]}" --as-deps
            else
                pacinstall "${pactrans_args[@]}" --file "${pkgs[@]}"
            fi
        fi

        # If successful, undo the steps we've done on dependency resolution, i.e.
        # perform the transaction in reverse order
        (( rmdeps )) && remove_depends
        ;;
    printsrcinfo|packagelist|allsource|source|geninteg|help|version)
        as_user makepkg "${makepkg_args[@]}"
        ;;
esac
