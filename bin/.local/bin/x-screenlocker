#!/bin/bash
readonly argv0=x-screensaver

i3lock_options=(
    --pointer=default
    --show-failed-attempts
)

blur_image() {
    ffmpeg -loglevel 0 -i - -vf "gblur=sigma=$1" -y "$2"
}

screenshot() {
    maim --hidecursor
}

trap_exit() {
    if [[ ! -o xtrace ]]; then
	rm -rf "$img"
    else
	printf >&2 'temporary file at %s\n' "$img"
    fi
}

img=$(mktemp -t "$argv0".XXXXXX --suffix=.png) || exit
trap 'trap_exit' EXIT

unset sigma
while getopts :s opt; do
    case $opt in
	s|+s)
	    sigma=$OPTARG ;;
	*)
	    echo "usage: ${0##*/} [+-s} [--] ARGS..."
	    exit 2
    esac
done
shift $(( OPTIND - 1 ))
OPTIND=1

# create blurred image of root window
if screenshot | blur_image "${sigma-10}" "$img"; then
    i3lock_options+=(--image="$img")
fi

# We set a trap to kill the locker if we get killed, then start the locker and
# wait for it to exit. The waiting is not that straightforward when the locker
# forks, so we use this polling only if we have a sleep lock to deal with.
if [[ -e /dev/fd/${XSS_SLEEP_LOCK_FD:--1} ]]; then
    kill_i3lock() {
        pkill -xu "$EUID" "$@" i3lock
    }
    trap kill_i3lock TERM INT

    # we have to make sure the locker does not inherit a copy of the lock fd
    i3lock "${i3lock_options[@]}" {XSS_SLEEP_LOCK_FD}<&-

    # now close our fd (only remaining copy) to indicate we're ready to sleep
    exec {XSS_SLEEP_LOCK_FD}<&-

    while kill_i3lock -0; do
        sleep 0.5
    done
else
    trap 'kill %%' TERM INT

    i3lock -n "${i3lock_options[@]}" &
    wait
fi
