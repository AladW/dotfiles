#!/bin/bash --
# statusbar - simple example for efficient statusdir output

# printf -v second and sleep combinations used throughout to try line up all
# poll based output on the minute instead of letting it randomly cascade.

# Allow > redirections without needing true as a no-op.
# shellcheck disable=SC2188

statusdir=${TMPDIR:-/tmp}/statusbar

# Only the final directory needs these permissions.
# shellcheck disable=SC2174
mkdir -pm0700 "$statusdir"

trap 'kill -s HUP 0 && rm -rf -- "$statusdir"' EXIT

procname() {
    printf -- '%s' "$*" > /proc/self/comm
}

mpdcurrent() {
    procname "${FUNCNAME[0]}"
    local fmt='[[%artist% - ]%title%]|[%file%]'

    while :; do
        mpc idleloop player | while read -r event; do
            mpc current -f "$fmt" | sed 's/\([\"]\)/\\\1/g;' > "$statusdir"/mpc
        done

        # If mpd is killed, mpc should retry but not too quickly.
        sleep 2
    done
}

clock() {
    procname "${FUNCNAME[0]}"
    local second

    while :; do
        printf -v second '%(%S)T' -1

        printf -- '%(%A %B %d %H:%M)T' -1 > "$statusdir"/clock

        sleep "$((60 - 10#$second))"
    done
}

diskusage() {
    procname "${FUNCNAME[0]}"
    local device avail second

    device=$(findmnt -T "$PWD" -no source)

    while :; do
        printf -v second '%(%S)T' -1

        { read -r; read -r avail; } < <(df -hl --output=avail "$device")
        printf '%s\n' "$avail" > "$statusdir"/disk

        sleep "$((120 - 10#$second))"
    done
}

battery() {
    procname "${FUNCNAME[0]}"
    local event devpath status threshold=89

    if [[ ! -e /sys/class/power_supply/$1/status ]]; then
        return
    fi

    poll_battery_capacity() {
        procname "${FUNCNAME[0]}"
        local second capacity status

        if mkdir "$statusdir"/battery.lock; then
            while :; do
                printf -v second '%(%S)T' -1

                read -r status < "$1"/status
                read -r capacity < "$1"/capacity

                case $status in
                    Discharging)
                        printf 'D%d\n' "$capacity" > "$statusdir"/battery
                        ;;
                    Charging)
                        if ((capacity < threshold)); then
                            printf 'C%d\n' "$capacity" > "$statusdir"/battery
                        else
                            > "$statusdir"/battery
                            return
                        fi
                        ;;
                    Unknown)
                        if ((capacity >= threshold)); then
                            > "$statusdir"/battery
                            return
                        fi
                esac

                sleep "$((120 - 10#$second))"
            done
        fi
    }

    stdbuf -oL -- udevadm monitor -us power_supply | while read -r _ _ event devpath _; do
        if [[ $event = change && $devpath = */$1 ]]; then
            if jobs %% > /dev/null 2>&1; then
                kill %%
                rm -rf -- "$statusdir"/battery.lock
            fi

            poll_battery_capacity /sys/"$devpath" &
        fi
    done
}

cpu() {
    procname "${FUNCNAME[0]}"
    local cpu idle second

    printf -v second '%(%S)T' -1
    sleep "$((60 - 10#$second))"

    # The cpu variable is not used.
    # shellcheck disable=SC2030
    mpstat 3 | while read -r _ cpu _ _ _ _ _ _ _ _ _ idle; do

        case $cpu in
            # Includes %iowait.
            all) printf 'scale=2;100-%0.2f\n' "$idle" | bc > "$statusdir"/cpu
        esac

    done
}

cputemp() {
    procname "${FUNCNAME[0]}"
    local temp second

    printf -v second '%(%S)T' -1
    sleep "$((60 - 10#$second))"

    while :; do
        read -r temp < /sys/devices/virtual/thermal/thermal_zone1/temp
        if (( temp > 80000 )); then
            printf '%dÂ°C\n' "$((temp/1000))" > "$statusdir"/cputemp
        else
            > "$statusdir"/cputemp
        fi
        sleep 3
    done
}

eventloop() {
    procname "${FUNCNAME[0]}"

    mkfifo "$statusdir"/statusbar
    inotifywait -qmre close_write --format %f "$statusdir" > "$statusdir"/statusbar &

    while read -r file; do
        if read -r -- "${file?}" < "$statusdir"/"$file"; then

            # The cpu variable in the cpu() pipe is not used.
            # shellcheck disable=SC2031

            # Variables are synthesised from above read and don't exist in the
            # script.
            # shellcheck disable=SC2154
            printf -- '[
                    {"name":"mpc","full_text":"%s", "color":"#65737e"},
                    {"name":"mic","full_text":"%s", "color":"#65737e"},
                    {"name":"vol","full_text":"%s", "color":"#65737e"},
                    {"name":"bat","full_text":"%s", "color":"#bf616a"},
                    {"name":"thm","full_text":"%s", "color":"#bf616a"},
                    {"name":"cpu","full_text":"%s", "color":"#65737e"},
                    {"name":"hdd","full_text":"%s", "color":"#65737e"},
                    {"name":"net","full_text":"%s", "color":"#65737e"},
                    {"name":"clk","full_text":"%s", "color":"#65737e"}
                ],' "${mpc:+MPD:$mpc}" \
                    "${vol:+VOL:$vol}" \
                    "${mic:+MIC:$mic}" \
                    "${battery:+BAT:$battery%}" \
                    "${cputemp:+TEMP:$cputemp}" \
                    "${cpu:+CPU:$cpu%}" \
                    "${disk:+HDD:$disk}"\
                    "${net:+NET:$net}" \
                    "${clock:+$clock}"
        fi
    done < "$statusdir"/statusbar
}

cputemp &
~/study/shell/pulsemonitor &
mpdcurrent &
battery BAT0 &
cpu &
diskusage &
~/study/shell/netmonitor "$statusdir" wlp3s0 &
clock &

# i3bar input protocol requires this header block.
# https://i3wm.org/docs/i3bar-protocol.html
printf -- '{"version":1}['

eventloop &

# If I enabled click events I could read stdin here, but I'm not so we simply
# wait.
wait
# while read -r stdin; do
#     # With i3 or lemonbar, click events would show up here.
#     : "$stdin"
# done
